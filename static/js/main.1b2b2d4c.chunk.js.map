{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","normalizeMovie","data","Title","Plot","Poster","imdbID","FindMovie","onSearch","onAddMovie","useState","setMovie","loading","isLoading","hasLoadingError","setLoadingError","handleFindMovie","event","a","preventDefault","finally","searchResult","Object","prototype","hasOwnProperty","call","htmlFor","type","id","placeholder","value","onChange","currentTarget","handleSearch","classNames","disabled","onClick","App","setMovies","setQuery","newMovie","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b2b2d4c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=c7db1118';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\nexport function normalizeMovie(data: MovieData): Movie {\n  const {\n    Title,\n    Plot,\n    Poster,\n    imdbID,\n  } = data;\n\n  // eslint-disable-next-line max-len\n  const defaultPoster = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n  const imdbUrl = `https://www.imdb.com/title/${imdbID}`;\n\n  return ({\n    title: Title,\n    description: Plot,\n    imgUrl: Poster === 'N/A' ? defaultPoster : Poster,\n    imdbUrl,\n    imdbId: imdbID,\n  });\n}\n\ntype Props = {\n  query: string,\n  onSearch: (value: string) => void;\n  onAddMovie: (newMovie: Movie) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  query,\n  onSearch,\n  onAddMovie,\n}) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [loading, isLoading] = useState(false);\n  const [hasLoadingError, setLoadingError] = useState(false);\n\n  const handleSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    onSearch(event.currentTarget.value);\n\n    if (hasLoadingError && query) {\n      setLoadingError(false);\n    }\n  };\n\n  const handleFindMovie = async (event: FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    isLoading(true);\n    setLoadingError(false);\n\n    const searchResult = await getMovie(query)\n      .finally(() => isLoading(false));\n\n    if (Object.prototype.hasOwnProperty.call(searchResult, 'Error')) {\n      setLoadingError(true);\n    } else {\n      setMovie(normalizeMovie(searchResult as MovieData));\n    }\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      onAddMovie(movie);\n      setMovie(null);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => handleSearch(event)}\n            />\n          </div>\n\n          {hasLoadingError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': loading },\n              )}\n              disabled={!query}\n              onClick={event => handleFindMovie(event)}\n            >\n              {movie ? 'Search again' : 'Find movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n\n// getMovie(query)\n//   .then((movieData: MovieData) => {\n//     const findedMovie: Movie = {\n//       title: movieData.Title,\n//       description: movieData.Plot,\n//       imgUrl: movieData.Poster,\n//       imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n//       imdbId: movieData.imdbID,\n//     };\n\n//     setMovie(findedMovie);\n\n//     console.log(movieData);\n//   });\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n\n  const onSearch = (value: string) => setQuery(value);\n  const onAddMovie = (newMovie: Movie) => {\n    const isDuplicate = movies.some(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!isDuplicate) {\n      setMovies([\n        ...movies,\n        newMovie,\n      ]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          onSearch={onSearch}\n          onAddMovie={onAddMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}